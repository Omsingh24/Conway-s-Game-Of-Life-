
Game of life.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  0000052a  0000059e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000624  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b68  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000899  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000627  00000000  00000000  00001add  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00002104  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045d  00000000  00000000  000021f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000728  00000000  00000000  00002651  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00002d79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e2       	ldi	r30, 0x2A	; 42
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 35       	cpi	r26, 0x54	; 84
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e5       	ldi	r26, 0x54	; 84
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 35       	cpi	r26, 0x54	; 84
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <main>
  9e:	0c 94 93 02 	jmp	0x526	; 0x526 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <grid_panel>:


uint8_t buffer[6];

void grid_panel(uint8_t x,uint8_t y)
{
  a6:	cf 93       	push	r28
  a8:	c6 2f       	mov	r28, r22
	SETBIT(GROUND_PORT,y1);
  aa:	5a 9a       	sbi	0x0b, 2	; 11
	SETBIT(GROUND_PORT,y2);
  ac:	5b 9a       	sbi	0x0b, 3	; 11
	SETBIT(GROUND_PORT,y3);
  ae:	5c 9a       	sbi	0x0b, 4	; 11
	SETBIT(GROUND_PORT,y4);
  b0:	5d 9a       	sbi	0x0b, 5	; 11
	SETBIT(GROUND_PORT,y5);
  b2:	5e 9a       	sbi	0x0b, 6	; 11
	SETBIT(GROUND_PORT,y6);
  b4:	5f 9a       	sbi	0x0b, 7	; 11
	shift_out(x);
  b6:	0e 94 b4 01 	call	0x368	; 0x368 <shift_out>
	switch (y)
  ba:	c3 30       	cpi	r28, 0x03	; 3
  bc:	81 f0       	breq	.+32     	; 0xde <grid_panel+0x38>
  be:	28 f4       	brcc	.+10     	; 0xca <grid_panel+0x24>
  c0:	c1 30       	cpi	r28, 0x01	; 1
  c2:	49 f0       	breq	.+18     	; 0xd6 <grid_panel+0x30>
  c4:	c2 30       	cpi	r28, 0x02	; 2
  c6:	49 f0       	breq	.+18     	; 0xda <grid_panel+0x34>
  c8:	11 c0       	rjmp	.+34     	; 0xec <grid_panel+0x46>
  ca:	c5 30       	cpi	r28, 0x05	; 5
  cc:	61 f0       	breq	.+24     	; 0xe6 <grid_panel+0x40>
  ce:	48 f0       	brcs	.+18     	; 0xe2 <grid_panel+0x3c>
  d0:	c6 30       	cpi	r28, 0x06	; 6
  d2:	59 f0       	breq	.+22     	; 0xea <grid_panel+0x44>
  d4:	0b c0       	rjmp	.+22     	; 0xec <grid_panel+0x46>
	{
		case 1:
			CLEARBIT(GROUND_PORT,y1);
  d6:	5a 98       	cbi	0x0b, 2	; 11
			break;
  d8:	09 c0       	rjmp	.+18     	; 0xec <grid_panel+0x46>
		case 2:
			CLEARBIT(GROUND_PORT,y2);
  da:	5b 98       	cbi	0x0b, 3	; 11
			break;
  dc:	07 c0       	rjmp	.+14     	; 0xec <grid_panel+0x46>
		case 3:
			CLEARBIT(GROUND_PORT,y3);
  de:	5c 98       	cbi	0x0b, 4	; 11
			break;
  e0:	05 c0       	rjmp	.+10     	; 0xec <grid_panel+0x46>
		case 4:
			CLEARBIT(GROUND_PORT,y4);
  e2:	5d 98       	cbi	0x0b, 5	; 11
			break;
  e4:	03 c0       	rjmp	.+6      	; 0xec <grid_panel+0x46>
		case 5:
			CLEARBIT(GROUND_PORT,y5);
  e6:	5e 98       	cbi	0x0b, 6	; 11
			break;
  e8:	01 c0       	rjmp	.+2      	; 0xec <grid_panel+0x46>
		case 6:
			CLEARBIT(GROUND_PORT,y6);
  ea:	5f 98       	cbi	0x0b, 7	; 11
			break;	
	}
}
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <game_of_life.1790>:
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
											};
	uint8_t m;
	uint8_t flag=0;
void game_of_life()
{
  f0:	2f 92       	push	r2
  f2:	3f 92       	push	r3
  f4:	ff 92       	push	r15
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	b1 01       	movw	r22, r2
 100:	66 5f       	subi	r22, 0xF6	; 246
 102:	7f 4f       	sbci	r23, 0xFF	; 255
 104:	d1 01       	movw	r26, r2
 106:	aa 5b       	subi	r26, 0xBA	; 186
 108:	bf 4f       	sbci	r27, 0xFF	; 255
 10a:	08 e0       	ldi	r16, 0x08	; 8
				 new_gen[x][y]=1;
			 }
			 
			 else if (((t==2) || (t==3)) && this_gen[x][y]==1)
			 {
				 new_gen[x][y]=this_gen[x][y];
 10c:	ff 24       	eor	r15, r15
 10e:	f3 94       	inc	r15
 110:	40 c0       	rjmp	.+128    	; 0x192 <game_of_life.1790+0xa2>
 112:	ac 01       	movw	r20, r24
 114:	ec 01       	movw	r28, r24
 116:	ce 5a       	subi	r28, 0xAE	; 174
 118:	df 4f       	sbci	r29, 0xFF	; 255
 11a:	38 81       	ld	r19, Y
 11c:	22 97       	sbiw	r28, 0x02	; 2
 11e:	28 81       	ld	r18, Y
 120:	23 0f       	add	r18, r19
 122:	29 97       	sbiw	r28, 0x09	; 9
 124:	38 81       	ld	r19, Y
 126:	23 0f       	add	r18, r19
 128:	64 96       	adiw	r28, 0x14	; 20
 12a:	38 81       	ld	r19, Y
 12c:	23 0f       	add	r18, r19
 12e:	21 97       	sbiw	r28, 0x01	; 1
 130:	38 81       	ld	r19, Y
 132:	23 0f       	add	r18, r19
 134:	64 97       	sbiw	r28, 0x14	; 20
			right=this_gen[x+1][y];
			dur=this_gen[x+1][y-1];
			dul=this_gen[x-1][y-1];
			ddr=this_gen[x+1][y+1];
			ddl=this_gen[x-1][y+1];
			t=up+down+left+right+dul+dur+ddr+ddl;
 136:	38 81       	ld	r19, Y
 138:	23 0f       	add	r18, r19
 13a:	66 96       	adiw	r28, 0x16	; 22
 13c:	38 81       	ld	r19, Y
 13e:	23 0f       	add	r18, r19
 140:	64 97       	sbiw	r28, 0x14	; 20
 142:	38 81       	ld	r19, Y
 144:	23 0f       	add	r18, r19
			 if (t<2)
 146:	22 30       	cpi	r18, 0x02	; 2
 148:	10 f4       	brcc	.+4      	; 0x14e <game_of_life.1790+0x5e>
			 {
				  new_gen[x][y]=0;
 14a:	10 82       	st	Z, r1
 14c:	18 c0       	rjmp	.+48     	; 0x17e <game_of_life.1790+0x8e>
			 }
			 else if (t>3)
 14e:	24 30       	cpi	r18, 0x04	; 4
 150:	10 f0       	brcs	.+4      	; 0x156 <game_of_life.1790+0x66>
			 {
				new_gen[x][y]=0 ;
 152:	10 82       	st	Z, r1
 154:	14 c0       	rjmp	.+40     	; 0x17e <game_of_life.1790+0x8e>
			 }
			 else if ((t==3) && (this_gen[x][y]==0))
 156:	23 30       	cpi	r18, 0x03	; 3
 158:	41 f4       	brne	.+16     	; 0x16a <game_of_life.1790+0x7a>
 15a:	ec 01       	movw	r28, r24
 15c:	cf 5a       	subi	r28, 0xAF	; 175
 15e:	df 4f       	sbci	r29, 0xFF	; 255
 160:	28 81       	ld	r18, Y
 162:	21 11       	cpse	r18, r1
 164:	05 c0       	rjmp	.+10     	; 0x170 <game_of_life.1790+0x80>
			 {
				 new_gen[x][y]=1;
 166:	f0 82       	st	Z, r15
 168:	0a c0       	rjmp	.+20     	; 0x17e <game_of_life.1790+0x8e>
			 }
			 
			 else if (((t==2) || (t==3)) && this_gen[x][y]==1)
 16a:	22 50       	subi	r18, 0x02	; 2
 16c:	22 30       	cpi	r18, 0x02	; 2
 16e:	38 f4       	brcc	.+14     	; 0x17e <game_of_life.1790+0x8e>
 170:	ea 01       	movw	r28, r20
 172:	cf 5a       	subi	r28, 0xAF	; 175
 174:	df 4f       	sbci	r29, 0xFF	; 255
 176:	28 81       	ld	r18, Y
 178:	21 30       	cpi	r18, 0x01	; 1
 17a:	09 f4       	brne	.+2      	; 0x17e <game_of_life.1790+0x8e>
			 {
				 new_gen[x][y]=this_gen[x][y];
 17c:	f0 82       	st	Z, r15
 17e:	11 50       	subi	r17, 0x01	; 1
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	31 96       	adiw	r30, 0x01	; 1
void game_of_life()
{
	uint8_t up,down,left,right,dul,dur,ddl,ddr,t;
	for(uint8_t x=1;x<7;x++)
	{
		for (uint8_t y=1;y<9;y++)
 184:	11 11       	cpse	r17, r1
 186:	c5 cf       	rjmp	.-118    	; 0x112 <game_of_life.1790+0x22>
 188:	66 5f       	subi	r22, 0xF6	; 246
 18a:	7f 4f       	sbci	r23, 0xFF	; 255
	uint8_t m;
	uint8_t flag=0;
void game_of_life()
{
	uint8_t up,down,left,right,dul,dur,ddl,ddr,t;
	for(uint8_t x=1;x<7;x++)
 18c:	6a 17       	cp	r22, r26
 18e:	7b 07       	cpc	r23, r27
 190:	29 f0       	breq	.+10     	; 0x19c <game_of_life.1790+0xac>
 192:	fb 01       	movw	r30, r22
 194:	31 96       	adiw	r30, 0x01	; 1
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
											};
	uint8_t m;
	uint8_t flag=0;
void game_of_life()
{
 196:	cb 01       	movw	r24, r22
 198:	10 2f       	mov	r17, r16
 19a:	bb cf       	rjmp	.-138    	; 0x112 <game_of_life.1790+0x22>
		}
		}


	
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	ff 90       	pop	r15
 1a6:	3f 90       	pop	r3
 1a8:	2f 90       	pop	r2
 1aa:	08 95       	ret

000001ac <main>:
#define rule ^



int main(void)
{
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
 1b4:	c5 5a       	subi	r28, 0xA5	; 165
 1b6:	d1 09       	sbc	r29, r1
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	de bf       	out	0x3e, r29	; 62
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	cd bf       	out	0x3d, r28	; 61
	DDRB |= ((1<<DDB2) | (1<<DDB3) | (1<<DDB4));
 1c2:	84 b1       	in	r24, 0x04	; 4
 1c4:	8c 61       	ori	r24, 0x1C	; 28
 1c6:	84 b9       	out	0x04, r24	; 4
	DDRD |= ((1<<DDD7) | (1<<DDD2) | (1<<DDD3) |(1<<DDD4) |(1<<DDD5) |(1<<DDD6));
 1c8:	8a b1       	in	r24, 0x0a	; 10
 1ca:	8c 6f       	ori	r24, 0xFC	; 252
 1cc:	8a b9       	out	0x0a, r24	; 10
	
	//uint8_t this_gen[8][10]; //padded matrix to avoid unbound index
	uint8_t new_gen[8][10];
	uint8_t row_int;
	uint8_t this_gen[8][10]={
 1ce:	80 e5       	ldi	r24, 0x50	; 80
 1d0:	e4 e0       	ldi	r30, 0x04	; 4
 1d2:	f1 e0       	ldi	r31, 0x01	; 1
 1d4:	de 01       	movw	r26, r28
 1d6:	af 5a       	subi	r26, 0xAF	; 175
 1d8:	bf 4f       	sbci	r27, 0xFF	; 255
 1da:	01 90       	ld	r0, Z+
 1dc:	0d 92       	st	X+, r0
 1de:	8a 95       	dec	r24
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0x2e>
#define rule ^



int main(void)
{
 1e2:	ce 01       	movw	r24, r28
 1e4:	84 5a       	subi	r24, 0xA4	; 164
 1e6:	9f 4f       	sbci	r25, 0xFF	; 255
 1e8:	cf 55       	subi	r28, 0x5F	; 95
 1ea:	df 4f       	sbci	r29, 0xFF	; 255
 1ec:	99 83       	std	Y+1, r25	; 0x01
 1ee:	88 83       	st	Y, r24
 1f0:	c1 5a       	subi	r28, 0xA1	; 161
 1f2:	d0 40       	sbci	r29, 0x00	; 0
 1f4:	68 94       	set
 1f6:	dd 24       	eor	r13, r13
 1f8:	d3 f8       	bld	r13, 3
 1fa:	68 94       	set
 1fc:	77 24       	eor	r7, r7
 1fe:	77 f8       	bld	r7, 7
 200:	c1 2c       	mov	r12, r1
 202:	5e 01       	movw	r10, r28
 204:	98 e9       	ldi	r25, 0x98	; 152
 206:	a9 0e       	add	r10, r25
 208:	b1 1c       	adc	r11, r1
			{
				flag=flag+1;
			}
				this_gen[i][j]=new_gen[i][j];
				
			if(flag==48)
 20a:	cf 55       	subi	r28, 0x5F	; 95
 20c:	df 4f       	sbci	r29, 0xFF	; 255
 20e:	a8 81       	ld	r26, Y
 210:	c1 5a       	subi	r28, 0xA1	; 161
 212:	d0 40       	sbci	r29, 0x00	; 0
 214:	cc 55       	subi	r28, 0x5C	; 92
 216:	df 4f       	sbci	r29, 0xFF	; 255
 218:	a8 83       	st	Y, r26
 21a:	c4 5a       	subi	r28, 0xA4	; 164
 21c:	d0 40       	sbci	r29, 0x00	; 0
 21e:	ce 55       	subi	r28, 0x5E	; 94
 220:	df 4f       	sbci	r29, 0xFF	; 255
 222:	b8 81       	ld	r27, Y
 224:	c2 5a       	subi	r28, 0xA2	; 162
 226:	d0 40       	sbci	r29, 0x00	; 0
 228:	cb 55       	subi	r28, 0x5B	; 91
 22a:	df 4f       	sbci	r29, 0xFF	; 255
 22c:	b8 83       	st	Y, r27
 22e:	c5 5a       	subi	r28, 0xA5	; 165
 230:	d0 40       	sbci	r29, 0x00	; 0
#define rule ^



int main(void)
{
 232:	6d 2c       	mov	r6, r13
 234:	0f 2e       	mov	r0, r31
 236:	f2 e3       	ldi	r31, 0x32	; 50
 238:	ef 2e       	mov	r14, r31
 23a:	f1 2c       	mov	r15, r1
 23c:	f0 2d       	mov	r31, r0
 23e:	88 24       	eor	r8, r8
 240:	83 94       	inc	r8
 242:	21 c0       	rjmp	.+66     	; 0x286 <main+0xda>
			{	
				m=128;
				row_int=0;
				for(uint8_t j=1;j<9;j++)
				{
					row_int=row_int+(this_gen[i][j]*m);
 244:	31 91       	ld	r19, Z+
 246:	39 9f       	mul	r19, r25
 248:	80 0d       	add	r24, r0
 24a:	11 24       	eor	r1, r1
					m=m/2;
 24c:	96 95       	lsr	r25
 24e:	21 50       	subi	r18, 0x01	; 1
		{
			for(uint8_t i=1;i<7;i++)
			{	
				m=128;
				row_int=0;
				for(uint8_t j=1;j<9;j++)
 250:	c9 f7       	brne	.-14     	; 0x244 <main+0x98>
				{
					row_int=row_int+(this_gen[i][j]*m);
					m=m/2;
				}
			
				grid_panel(row_int,i);
 252:	69 2d       	mov	r22, r9
 254:	0e 94 53 00 	call	0xa6	; 0xa6 <grid_panel>
				latch_pulse();
 258:	0e 94 b1 01 	call	0x362	; 0x362 <latch_pulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25c:	ef e9       	ldi	r30, 0x9F	; 159
 25e:	ff e0       	ldi	r31, 0x0F	; 15
 260:	31 97       	sbiw	r30, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <main+0xb4>
 264:	00 c0       	rjmp	.+0      	; 0x266 <main+0xba>
 266:	00 00       	nop
    while (1) 
    {	
		
		for(uint16_t t=0;t<50;t++)
		{
			for(uint8_t i=1;i<7;i++)
 268:	93 94       	inc	r9
 26a:	06 5f       	subi	r16, 0xF6	; 246
 26c:	1f 4f       	sbci	r17, 0xFF	; 255
 26e:	f7 e0       	ldi	r31, 0x07	; 7
 270:	9f 16       	cp	r9, r31
 272:	29 f0       	breq	.+10     	; 0x27e <main+0xd2>
#define rule ^



int main(void)
{
 274:	f8 01       	movw	r30, r16
 276:	2d 2d       	mov	r18, r13
 278:	97 2d       	mov	r25, r7
 27a:	8c 2d       	mov	r24, r12
 27c:	e3 cf       	rjmp	.-58     	; 0x244 <main+0x98>
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	e8 1a       	sub	r14, r24
 282:	f1 08       	sbc	r15, r1
}
//	game_of_life(this_gen,new_grid);
    while (1) 
    {	
		
		for(uint16_t t=0;t<50;t++)
 284:	29 f0       	breq	.+10     	; 0x290 <main+0xe4>
#define rule ^



int main(void)
{
 286:	8e 01       	movw	r16, r28
 288:	04 5a       	subi	r16, 0xA4	; 164
 28a:	1f 4f       	sbci	r17, 0xFF	; 255
 28c:	98 2c       	mov	r9, r8
 28e:	f2 cf       	rjmp	.-28     	; 0x274 <main+0xc8>
				latch_pulse();
				_delay_ms(1);
			}
		}
		
	game_of_life(this_gen,new_gen);
 290:	de 01       	movw	r26, r28
 292:	11 96       	adiw	r26, 0x01	; 1
 294:	1d 01       	movw	r2, r26
 296:	bd 01       	movw	r22, r26
 298:	ce 01       	movw	r24, r28
 29a:	8f 5a       	subi	r24, 0xAF	; 175
 29c:	9f 4f       	sbci	r25, 0xFF	; 255
 29e:	0e 94 78 00 	call	0xf0	; 0xf0 <game_of_life.1790>
 2a2:	fe 01       	movw	r30, r28
 2a4:	e4 5a       	subi	r30, 0xA4	; 164
 2a6:	ff 4f       	sbci	r31, 0xFF	; 255
 2a8:	1f 01       	movw	r2, r30
	flag=0;
 2aa:	cd 55       	subi	r28, 0x5D	; 93
 2ac:	df 4f       	sbci	r29, 0xFF	; 255
 2ae:	18 82       	st	Y, r1
 2b0:	c3 5a       	subi	r28, 0xA3	; 163
 2b2:	d0 40       	sbci	r29, 0x00	; 0
 2b4:	42 c0       	rjmp	.+132    	; 0x33a <main+0x18e>
 2b6:	f4 01       	movw	r30, r8
 2b8:	d4 01       	movw	r26, r8
 2ba:	a0 55       	subi	r26, 0x50	; 80
 2bc:	b1 09       	sbc	r27, r1
	for(uint8_t i=1;i<7;i++)
	{
		for (uint8_t j=1;j<9;j++)
		{
			
			if(this_gen[i][j]==new_gen[i][j])
 2be:	8c 91       	ld	r24, X
 2c0:	90 81       	ld	r25, Z
 2c2:	98 13       	cpse	r25, r24
 2c4:	3f c0       	rjmp	.+126    	; 0x344 <main+0x198>
			{
				flag=flag+1;
 2c6:	cd 55       	subi	r28, 0x5D	; 93
 2c8:	df 4f       	sbci	r29, 0xFF	; 255
 2ca:	b8 81       	ld	r27, Y
 2cc:	c3 5a       	subi	r28, 0xA3	; 163
 2ce:	d0 40       	sbci	r29, 0x00	; 0
 2d0:	bf 5f       	subi	r27, 0xFF	; 255
 2d2:	cd 55       	subi	r28, 0x5D	; 93
 2d4:	df 4f       	sbci	r29, 0xFF	; 255
 2d6:	b8 83       	st	Y, r27
 2d8:	c3 5a       	subi	r28, 0xA3	; 163
 2da:	d0 40       	sbci	r29, 0x00	; 0
 2dc:	33 c0       	rjmp	.+102    	; 0x344 <main+0x198>
			{
				for(uint8_t i=1;i<7;i++)
				{
					for(uint8_t j=1;j<9;j++)
					{
						this_gen[i][j]=(rand()%2);
 2de:	0e 94 20 02 	call	0x440	; 0x440 <rand>
 2e2:	81 70       	andi	r24, 0x01	; 1
 2e4:	90 78       	andi	r25, 0x80	; 128
 2e6:	99 23       	and	r25, r25
 2e8:	24 f4       	brge	.+8      	; 0x2f2 <main+0x146>
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	8e 6f       	ori	r24, 0xFE	; 254
 2ee:	9f 6f       	ori	r25, 0xFF	; 255
 2f0:	01 96       	adiw	r24, 0x01	; 1
 2f2:	f8 01       	movw	r30, r16
 2f4:	81 93       	st	Z+, r24
 2f6:	8f 01       	movw	r16, r30
 2f8:	5a 94       	dec	r5
				
			if(flag==48)
			{
				for(uint8_t i=1;i<7;i++)
				{
					for(uint8_t j=1;j<9;j++)
 2fa:	51 10       	cpse	r5, r1
 2fc:	f0 cf       	rjmp	.-32     	; 0x2de <main+0x132>
 2fe:	fa e0       	ldi	r31, 0x0A	; 10
 300:	ef 0e       	add	r14, r31
 302:	f1 1c       	adc	r15, r1
			}
				this_gen[i][j]=new_gen[i][j];
				
			if(flag==48)
			{
				for(uint8_t i=1;i<7;i++)
 304:	ae 14       	cp	r10, r14
 306:	bf 04       	cpc	r11, r15
 308:	59 f4       	brne	.+22     	; 0x320 <main+0x174>
 30a:	0d c0       	rjmp	.+26     	; 0x326 <main+0x17a>
			{
				flag=flag+1;
			}
				this_gen[i][j]=new_gen[i][j];
				
			if(flag==48)
 30c:	cc 55       	subi	r28, 0x5C	; 92
 30e:	df 4f       	sbci	r29, 0xFF	; 255
 310:	e8 80       	ld	r14, Y
 312:	c4 5a       	subi	r28, 0xA4	; 164
 314:	d0 40       	sbci	r29, 0x00	; 0
 316:	cb 55       	subi	r28, 0x5B	; 91
 318:	df 4f       	sbci	r29, 0xFF	; 255
 31a:	f8 80       	ld	r15, Y
 31c:	c5 5a       	subi	r28, 0xA5	; 165
 31e:	d0 40       	sbci	r29, 0x00	; 0
#define rule ^



int main(void)
{
 320:	87 01       	movw	r16, r14
 322:	56 2c       	mov	r5, r6
 324:	dc cf       	rjmp	.-72     	; 0x2de <main+0x132>
 326:	4a 94       	dec	r4
	game_of_life(this_gen,new_gen);
	flag=0;
	
	for(uint8_t i=1;i<7;i++)
	{
		for (uint8_t j=1;j<9;j++)
 328:	41 10       	cpse	r4, r1
 32a:	c5 cf       	rjmp	.-118    	; 0x2b6 <main+0x10a>
 32c:	8a e0       	ldi	r24, 0x0A	; 10
 32e:	28 0e       	add	r2, r24
 330:	31 1c       	adc	r3, r1
		}
		
	game_of_life(this_gen,new_gen);
	flag=0;
	
	for(uint8_t i=1;i<7;i++)
 332:	2a 14       	cp	r2, r10
 334:	3b 04       	cpc	r3, r11
 336:	09 f4       	brne	.+2      	; 0x33a <main+0x18e>
 338:	7d cf       	rjmp	.-262    	; 0x234 <main+0x88>
#define rule ^



int main(void)
{
 33a:	41 01       	movw	r8, r2
 33c:	68 94       	set
 33e:	44 24       	eor	r4, r4
 340:	43 f8       	bld	r4, 3
 342:	b9 cf       	rjmp	.-142    	; 0x2b6 <main+0x10a>
			
			if(this_gen[i][j]==new_gen[i][j])
			{
				flag=flag+1;
			}
				this_gen[i][j]=new_gen[i][j];
 344:	80 83       	st	Z, r24
 346:	9f ef       	ldi	r25, 0xFF	; 255
 348:	89 1a       	sub	r8, r25
 34a:	99 0a       	sbc	r9, r25
				
			if(flag==48)
 34c:	cd 55       	subi	r28, 0x5D	; 93
 34e:	df 4f       	sbci	r29, 0xFF	; 255
 350:	a8 81       	ld	r26, Y
 352:	c3 5a       	subi	r28, 0xA3	; 163
 354:	d0 40       	sbci	r29, 0x00	; 0
 356:	a0 33       	cpi	r26, 0x30	; 48
 358:	31 f7       	brne	.-52     	; 0x326 <main+0x17a>
 35a:	d8 cf       	rjmp	.-80     	; 0x30c <main+0x160>

0000035c <clock_pulse>:



void clock_pulse()
{
	SETBIT (CLOCK_PORT,CLOCK_PIN);
 35c:	2a 9a       	sbi	0x05, 2	; 5
	CLEARBIT (CLOCK_PORT,CLOCK_PIN);
 35e:	2a 98       	cbi	0x05, 2	; 5
 360:	08 95       	ret

00000362 <latch_pulse>:
}

void latch_pulse()
{
	
	SETBIT(LATCH_PORT,LATCH_PIN);
 362:	2b 9a       	sbi	0x05, 3	; 5
	CLEARBIT(LATCH_PORT,LATCH_PIN);
 364:	2b 98       	cbi	0x05, 3	; 5
 366:	08 95       	ret

00000368 <shift_out>:
	
}*/


void shift_out(uint8_t value)
{
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
	
	uint8_t i;
	
	CLEARBIT(LATCH_PORT,LATCH_PIN);
 370:	2b 98       	cbi	0x05, 3	; 5
 372:	c0 e0       	ldi	r28, 0x00	; 0
 374:	d0 e0       	ldi	r29, 0x00	; 0
	
	for (i = 0; i < 8; i++)  {
		if (!!(value & (1<<(i))))
 376:	08 2f       	mov	r16, r24
 378:	10 e0       	ldi	r17, 0x00	; 0
 37a:	98 01       	movw	r18, r16
 37c:	0c 2e       	mov	r0, r28
 37e:	02 c0       	rjmp	.+4      	; 0x384 <shift_out+0x1c>
 380:	35 95       	asr	r19
 382:	27 95       	ror	r18
 384:	0a 94       	dec	r0
 386:	e2 f7       	brpl	.-8      	; 0x380 <shift_out+0x18>
 388:	20 ff       	sbrs	r18, 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <shift_out+0x28>
		{
			SETBIT(DATA_PORT,DATA_PIN);	
 38c:	2c 9a       	sbi	0x05, 4	; 5
 38e:	01 c0       	rjmp	.+2      	; 0x392 <shift_out+0x2a>
		}
		else
		{
			CLEARBIT(DATA_PORT,DATA_PIN);
 390:	2c 98       	cbi	0x05, 4	; 5
		}
		clock_pulse();
 392:	0e 94 ae 01 	call	0x35c	; 0x35c <clock_pulse>
 396:	21 96       	adiw	r28, 0x01	; 1
	
	uint8_t i;
	
	CLEARBIT(LATCH_PORT,LATCH_PIN);
	
	for (i = 0; i < 8; i++)  {
 398:	c8 30       	cpi	r28, 0x08	; 8
 39a:	d1 05       	cpc	r29, r1
 39c:	71 f7       	brne	.-36     	; 0x37a <shift_out+0x12>
		{
			CLEARBIT(DATA_PORT,DATA_PIN);
		}
		clock_pulse();
	}
}
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	1f 91       	pop	r17
 3a4:	0f 91       	pop	r16
 3a6:	08 95       	ret

000003a8 <do_rand>:
 3a8:	8f 92       	push	r8
 3aa:	9f 92       	push	r9
 3ac:	af 92       	push	r10
 3ae:	bf 92       	push	r11
 3b0:	cf 92       	push	r12
 3b2:	df 92       	push	r13
 3b4:	ef 92       	push	r14
 3b6:	ff 92       	push	r15
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	ec 01       	movw	r28, r24
 3be:	68 81       	ld	r22, Y
 3c0:	79 81       	ldd	r23, Y+1	; 0x01
 3c2:	8a 81       	ldd	r24, Y+2	; 0x02
 3c4:	9b 81       	ldd	r25, Y+3	; 0x03
 3c6:	61 15       	cp	r22, r1
 3c8:	71 05       	cpc	r23, r1
 3ca:	81 05       	cpc	r24, r1
 3cc:	91 05       	cpc	r25, r1
 3ce:	21 f4       	brne	.+8      	; 0x3d8 <do_rand+0x30>
 3d0:	64 e2       	ldi	r22, 0x24	; 36
 3d2:	79 ed       	ldi	r23, 0xD9	; 217
 3d4:	8b e5       	ldi	r24, 0x5B	; 91
 3d6:	97 e0       	ldi	r25, 0x07	; 7
 3d8:	2d e1       	ldi	r18, 0x1D	; 29
 3da:	33 ef       	ldi	r19, 0xF3	; 243
 3dc:	41 e0       	ldi	r20, 0x01	; 1
 3de:	50 e0       	ldi	r21, 0x00	; 0
 3e0:	0e 94 30 02 	call	0x460	; 0x460 <__divmodsi4>
 3e4:	49 01       	movw	r8, r18
 3e6:	5a 01       	movw	r10, r20
 3e8:	9b 01       	movw	r18, r22
 3ea:	ac 01       	movw	r20, r24
 3ec:	a7 ea       	ldi	r26, 0xA7	; 167
 3ee:	b1 e4       	ldi	r27, 0x41	; 65
 3f0:	0e 94 4f 02 	call	0x49e	; 0x49e <__muluhisi3>
 3f4:	6b 01       	movw	r12, r22
 3f6:	7c 01       	movw	r14, r24
 3f8:	ac ee       	ldi	r26, 0xEC	; 236
 3fa:	b4 ef       	ldi	r27, 0xF4	; 244
 3fc:	a5 01       	movw	r20, r10
 3fe:	94 01       	movw	r18, r8
 400:	0e 94 5d 02 	call	0x4ba	; 0x4ba <__mulohisi3>
 404:	dc 01       	movw	r26, r24
 406:	cb 01       	movw	r24, r22
 408:	8c 0d       	add	r24, r12
 40a:	9d 1d       	adc	r25, r13
 40c:	ae 1d       	adc	r26, r14
 40e:	bf 1d       	adc	r27, r15
 410:	b7 ff       	sbrs	r27, 7
 412:	03 c0       	rjmp	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	a1 09       	sbc	r26, r1
 418:	b0 48       	sbci	r27, 0x80	; 128
 41a:	88 83       	st	Y, r24
 41c:	99 83       	std	Y+1, r25	; 0x01
 41e:	aa 83       	std	Y+2, r26	; 0x02
 420:	bb 83       	std	Y+3, r27	; 0x03
 422:	9f 77       	andi	r25, 0x7F	; 127
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	ff 90       	pop	r15
 42a:	ef 90       	pop	r14
 42c:	df 90       	pop	r13
 42e:	cf 90       	pop	r12
 430:	bf 90       	pop	r11
 432:	af 90       	pop	r10
 434:	9f 90       	pop	r9
 436:	8f 90       	pop	r8
 438:	08 95       	ret

0000043a <rand_r>:
 43a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <do_rand>
 43e:	08 95       	ret

00000440 <rand>:
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <do_rand>
 448:	08 95       	ret

0000044a <srand>:
 44a:	a0 e0       	ldi	r26, 0x00	; 0
 44c:	b0 e0       	ldi	r27, 0x00	; 0
 44e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 452:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 456:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 45a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 45e:	08 95       	ret

00000460 <__divmodsi4>:
 460:	05 2e       	mov	r0, r21
 462:	97 fb       	bst	r25, 7
 464:	1e f4       	brtc	.+6      	; 0x46c <__divmodsi4+0xc>
 466:	00 94       	com	r0
 468:	0e 94 47 02 	call	0x48e	; 0x48e <__negsi2>
 46c:	57 fd       	sbrc	r21, 7
 46e:	07 d0       	rcall	.+14     	; 0x47e <__divmodsi4_neg2>
 470:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__udivmodsi4>
 474:	07 fc       	sbrc	r0, 7
 476:	03 d0       	rcall	.+6      	; 0x47e <__divmodsi4_neg2>
 478:	4e f4       	brtc	.+18     	; 0x48c <__divmodsi4_exit>
 47a:	0c 94 47 02 	jmp	0x48e	; 0x48e <__negsi2>

0000047e <__divmodsi4_neg2>:
 47e:	50 95       	com	r21
 480:	40 95       	com	r20
 482:	30 95       	com	r19
 484:	21 95       	neg	r18
 486:	3f 4f       	sbci	r19, 0xFF	; 255
 488:	4f 4f       	sbci	r20, 0xFF	; 255
 48a:	5f 4f       	sbci	r21, 0xFF	; 255

0000048c <__divmodsi4_exit>:
 48c:	08 95       	ret

0000048e <__negsi2>:
 48e:	90 95       	com	r25
 490:	80 95       	com	r24
 492:	70 95       	com	r23
 494:	61 95       	neg	r22
 496:	7f 4f       	sbci	r23, 0xFF	; 255
 498:	8f 4f       	sbci	r24, 0xFF	; 255
 49a:	9f 4f       	sbci	r25, 0xFF	; 255
 49c:	08 95       	ret

0000049e <__muluhisi3>:
 49e:	0e 94 84 02 	call	0x508	; 0x508 <__umulhisi3>
 4a2:	a5 9f       	mul	r26, r21
 4a4:	90 0d       	add	r25, r0
 4a6:	b4 9f       	mul	r27, r20
 4a8:	90 0d       	add	r25, r0
 4aa:	a4 9f       	mul	r26, r20
 4ac:	80 0d       	add	r24, r0
 4ae:	91 1d       	adc	r25, r1
 4b0:	11 24       	eor	r1, r1
 4b2:	08 95       	ret

000004b4 <__mulshisi3>:
 4b4:	b7 ff       	sbrs	r27, 7
 4b6:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__muluhisi3>

000004ba <__mulohisi3>:
 4ba:	0e 94 4f 02 	call	0x49e	; 0x49e <__muluhisi3>
 4be:	82 1b       	sub	r24, r18
 4c0:	93 0b       	sbc	r25, r19
 4c2:	08 95       	ret

000004c4 <__udivmodsi4>:
 4c4:	a1 e2       	ldi	r26, 0x21	; 33
 4c6:	1a 2e       	mov	r1, r26
 4c8:	aa 1b       	sub	r26, r26
 4ca:	bb 1b       	sub	r27, r27
 4cc:	fd 01       	movw	r30, r26
 4ce:	0d c0       	rjmp	.+26     	; 0x4ea <__udivmodsi4_ep>

000004d0 <__udivmodsi4_loop>:
 4d0:	aa 1f       	adc	r26, r26
 4d2:	bb 1f       	adc	r27, r27
 4d4:	ee 1f       	adc	r30, r30
 4d6:	ff 1f       	adc	r31, r31
 4d8:	a2 17       	cp	r26, r18
 4da:	b3 07       	cpc	r27, r19
 4dc:	e4 07       	cpc	r30, r20
 4de:	f5 07       	cpc	r31, r21
 4e0:	20 f0       	brcs	.+8      	; 0x4ea <__udivmodsi4_ep>
 4e2:	a2 1b       	sub	r26, r18
 4e4:	b3 0b       	sbc	r27, r19
 4e6:	e4 0b       	sbc	r30, r20
 4e8:	f5 0b       	sbc	r31, r21

000004ea <__udivmodsi4_ep>:
 4ea:	66 1f       	adc	r22, r22
 4ec:	77 1f       	adc	r23, r23
 4ee:	88 1f       	adc	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	1a 94       	dec	r1
 4f4:	69 f7       	brne	.-38     	; 0x4d0 <__udivmodsi4_loop>
 4f6:	60 95       	com	r22
 4f8:	70 95       	com	r23
 4fa:	80 95       	com	r24
 4fc:	90 95       	com	r25
 4fe:	9b 01       	movw	r18, r22
 500:	ac 01       	movw	r20, r24
 502:	bd 01       	movw	r22, r26
 504:	cf 01       	movw	r24, r30
 506:	08 95       	ret

00000508 <__umulhisi3>:
 508:	a2 9f       	mul	r26, r18
 50a:	b0 01       	movw	r22, r0
 50c:	b3 9f       	mul	r27, r19
 50e:	c0 01       	movw	r24, r0
 510:	a3 9f       	mul	r26, r19
 512:	70 0d       	add	r23, r0
 514:	81 1d       	adc	r24, r1
 516:	11 24       	eor	r1, r1
 518:	91 1d       	adc	r25, r1
 51a:	b2 9f       	mul	r27, r18
 51c:	70 0d       	add	r23, r0
 51e:	81 1d       	adc	r24, r1
 520:	11 24       	eor	r1, r1
 522:	91 1d       	adc	r25, r1
 524:	08 95       	ret

00000526 <_exit>:
 526:	f8 94       	cli

00000528 <__stop_program>:
 528:	ff cf       	rjmp	.-2      	; 0x528 <__stop_program>
